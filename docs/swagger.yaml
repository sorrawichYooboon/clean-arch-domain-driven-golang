definitions:
  domain.Author:
    properties:
      bio:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  domain.Book:
    properties:
      author:
        type: string
      category:
        type: string
      id:
        type: integer
      published_year:
        type: integer
      title:
        type: string
    type: object
  dto.AuthorDTO:
    properties:
      bio:
        type: string
      name:
        type: string
    required:
    - bio
    - name
    type: object
  dto.BookDTO:
    properties:
      author:
        type: string
      category:
        type: string
      published_year:
        type: integer
      title:
        type: string
    required:
    - author
    - category
    - published_year
    - title
    type: object
  dto.CredentialsDTO:
    description: User login credentials that include username and password.
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    type: object
  dto.ErrorDTO:
    description: Standard error response
    properties:
      message:
        example: An error occurred
        type: string
    type: object
  dto.ResponseDTO:
    description: Standard response structure for API responses.
    properties:
      message:
        example: User created successfully
        type: string
    type: object
  dto.TokenResponseDTO:
    description: JWT token response after successful login.
    properties:
      token:
        example: your_jwt_token_here
        type: string
    type: object
info:
  contact: {}
  description: This API enables management of a book store, allowing users to perform
    operations such as adding, updating, retrieving, and deleting books.
  title: Book Store Management API
  version: "1.0"
paths:
  /authors:
    get:
      description: Get all authors from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Author'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all authors
      tags:
      - authors
    post:
      consumes:
      - application/json
      description: Create a new author in the database
      parameters:
      - description: Author data
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/dto.AuthorDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new author
      tags:
      - authors
  /authors/{id}:
    delete:
      description: Delete the author with the given ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete an author
      tags:
      - authors
    put:
      consumes:
      - application/json
      description: Update the author with the given ID
      parameters:
      - description: Author ID
        in: path
        name: id
        required: true
        type: integer
      - description: Author data
        in: body
        name: author
        required: true
        schema:
          $ref: '#/definitions/dto.AuthorDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Author'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update an existing author
      tags:
      - authors
  /books:
    get:
      description: Get all books from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book in the database
      parameters:
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      description: Delete the book with the given ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Delete a book
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update the book with the given ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Book'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Update an existing book
      tags:
      - books
  /login:
    post:
      consumes:
      - application/json
      description: Login user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.CredentialsDTO'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/dto.TokenResponseDTO'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
      summary: Login user
      tags:
      - users
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CredentialsDTO'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/dto.ResponseDTO'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorDTO'
      summary: Register a new user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    description: 'You need to register and login on that api and Provide the JWT token
      prefixed with "Bearer " (including a space). For example: "Bearer your_token_here"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
